{"ast":null,"code":"var _jsxFileName = \"/Users/donromaniello/Code/JavaScript/tidey/src/components/Station.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CircleMarker, Polyline } from 'react-leaflet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst axios = require(\"axios\"); // require('dotenv').config();\n\n\nconst Station = props => {\n  _s();\n\n  const {\n    stationInfo\n  } = props;\n  const [predictions, setPredictions] = useState([]);\n  const [linePosition, setLinePosition] = useState([]);\n  const position = [stationInfo === null || stationInfo === void 0 ? void 0 : stationInfo.lat, stationInfo === null || stationInfo === void 0 ? void 0 : stationInfo.lng];\n  const circleRadius = 10;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CircleMarker, {\n      center: position,\n      pathOptions: stationMarker,\n      radius: circleRadius\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 8\n    }, this)\n  }, void 0, false);\n};\n\n_s(Station, \"XCxBIy/55OgI6H6ZZdeU5AAea+k=\");\n\n_c = Station;\nconst stationMarker = {\n  color: 'black',\n  opacity: '1'\n};\nconst waterLevelMarker = {\n  color: 'green'\n};\nexport default Station;\n\nvar _c;\n\n$RefreshReg$(_c, \"Station\");","map":{"version":3,"names":["React","useState","useEffect","CircleMarker","Polyline","axios","require","Station","props","stationInfo","predictions","setPredictions","linePosition","setLinePosition","position","lat","lng","circleRadius","stationMarker","color","opacity","waterLevelMarker"],"sources":["/Users/donromaniello/Code/JavaScript/tidey/src/components/Station.js"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\n\nimport {\n  CircleMarker,\n  Polyline,\n} from 'react-leaflet'\n\nconst axios =  require(\"axios\");\n\n// require('dotenv').config();\n\nconst Station = (props) => {\n\nconst { stationInfo } = props\n\nconst [predictions, setPredictions] = useState([])\n\nconst [linePosition, setLinePosition] = useState([]);\n\nconst position = [stationInfo?.lat, stationInfo?.lng]\n\nconst circleRadius = 10\n\n  return (\n    <>\n       <CircleMarker center={position} pathOptions={stationMarker} radius={circleRadius} />\n       {/* <Polyline pathOptions={waterLevelMarker} positions={linePosition} /> */}\n    </>\n)\n}\n\nconst stationMarker = { color: 'black', opacity: '1' }\n\nconst waterLevelMarker = { color: 'green' }\n\nexport default Station\n\n\n\n\n\n"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,SACEC,YADF,EAEEC,QAFF,QAGO,eAHP;;;;AAKA,MAAMC,KAAK,GAAIC,OAAO,CAAC,OAAD,CAAtB,C,CAEA;;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;EAAA;;EAE3B,MAAM;IAAEC;EAAF,IAAkBD,KAAxB;EAEA,MAAM,CAACE,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C;EAEA,MAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,EAAD,CAAhD;EAEA,MAAMa,QAAQ,GAAG,CAACL,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEM,GAAd,EAAmBN,WAAnB,aAAmBA,WAAnB,uBAAmBA,WAAW,CAAEO,GAAhC,CAAjB;EAEA,MAAMC,YAAY,GAAG,EAArB;EAEE,oBACE;IAAA,uBACG,QAAC,YAAD;MAAc,MAAM,EAAEH,QAAtB;MAAgC,WAAW,EAAEI,aAA7C;MAA4D,MAAM,EAAED;IAApE;MAAA;MAAA;MAAA;IAAA;EADH,iBADF;AAMD,CAlBD;;GAAMV,O;;KAAAA,O;AAoBN,MAAMW,aAAa,GAAG;EAAEC,KAAK,EAAE,OAAT;EAAkBC,OAAO,EAAE;AAA3B,CAAtB;AAEA,MAAMC,gBAAgB,GAAG;EAAEF,KAAK,EAAE;AAAT,CAAzB;AAEA,eAAeZ,OAAf"},"metadata":{},"sourceType":"module"}