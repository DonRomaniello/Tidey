{"ast":null,"code":"var _jsxFileName = \"/Users/donromaniello/Code/JavaScript/tidey/src/components/Station.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CircleMarker, Polyline } from 'react-leaflet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst axios = require(\"axios\");\n\nrequire('dotenv').config();\n\nconst Station = props => {\n  _s();\n\n  const {\n    stationInfo\n  } = props;\n  const [predictions, setPredictions] = useState([]);\n  const [linePosition, setLinePosition] = useState([]);\n  const position = [stationInfo === null || stationInfo === void 0 ? void 0 : stationInfo.lat, stationInfo === null || stationInfo === void 0 ? void 0 : stationInfo.lng];\n  const overlayStyle = {\n    opacity: '.25',\n    transform: 'rotate3d(1, 0, 0, 45deg)'\n  };\n  const circleRadius = 10;\n\n  const urlWithArguments = () => {\n    let args = [{\n      datum: 'MSL'\n    }, {\n      format: 'json'\n    }, {\n      interval: 'h'\n    }, {\n      product: 'water_level'\n    }, {\n      range: '24'\n    }, {\n      station: '8454000'\n    }, {\n      time_zone: 'lst'\n    }, {\n      units: 'english'\n    }];\n    let returnURl = 'https://api.tidesandcurrents.noaa.gov/api/prod/datagetter' + args.map(argument => '&' + Object.keys(argument)[0] + '=' + argument[Object.keys(argument)[0]]).join('');\n    return returnURl;\n  };\n\n  useEffect(() => {\n    const fetchTide = async () => {\n      const waterLevels = await axios.get(urlWithArguments(), {\n        headers: {\n          token: process.env.noaaToken\n        }\n      });\n      setPredictions(waterLevels);\n    };\n\n    fetchTide();\n  }, []);\n  useEffect(() => {\n    var _predictions$;\n\n    setLinePosition([position, [stationInfo.lon + ((_predictions$ = predictions[0]) === null || _predictions$ === void 0 ? void 0 : _predictions$.v), position[1]]]);\n  }, [predictions, position]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CircleMarker, {\n      center: position,\n      pathOptions: stationMarker,\n      radius: 3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n      pathOptions: waterLevelMarker,\n      positions: linePosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Station, \"kLQhdFaasoMZ1RPUnWKzmV0B/TI=\");\n\n_c = Station;\nconst stationMarker = {\n  color: 'blue',\n  opacity: '.2'\n};\nconst waterLevelMarker = {\n  color: 'green'\n};\nexport default Station;\n\nvar _c;\n\n$RefreshReg$(_c, \"Station\");","map":{"version":3,"names":["React","useState","useEffect","CircleMarker","Polyline","axios","require","config","Station","props","stationInfo","predictions","setPredictions","linePosition","setLinePosition","position","lat","lng","overlayStyle","opacity","transform","circleRadius","urlWithArguments","args","datum","format","interval","product","range","station","time_zone","units","returnURl","map","argument","Object","keys","join","fetchTide","waterLevels","get","headers","token","process","env","noaaToken","lon","v","stationMarker","waterLevelMarker","color"],"sources":["/Users/donromaniello/Code/JavaScript/tidey/src/components/Station.js"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\n\nimport {\n  CircleMarker,\n  Polyline,\n} from 'react-leaflet'\n\nconst axios =  require(\"axios\");\n\nrequire('dotenv').config();\n\nconst Station = (props) => {\n\nconst { stationInfo } = props\n\nconst [predictions, setPredictions] = useState([])\n\nconst [linePosition, setLinePosition] = useState([]);\n\nconst position = [stationInfo?.lat, stationInfo?.lng]\n\n\n\nconst overlayStyle = {\n  opacity: '.25',\n  transform: 'rotate3d(1, 0, 0, 45deg)',\n}\n\nconst circleRadius = 10\n\nconst urlWithArguments = () => {\n\n    let args = [\n      {datum: 'MSL'},\n      {format: 'json'},\n      {interval: 'h'},\n      {product: 'water_level'},\n      {range: '24'},\n      { station: '8454000'},\n      {time_zone: 'lst'},\n      {units: 'english'},\n    ]\n\n    let returnURl =  'https://api.tidesandcurrents.noaa.gov/api/prod/datagetter'\n                       + args.map((argument) => '&'\n                                  + Object.keys(argument)[0]\n                                  + '='\n                                  + argument[Object.keys(argument)[0]])\n                                  .join('')\n    return returnURl\n}\n\nuseEffect(() => {\n\n  const fetchTide = async () => {\n    const waterLevels = await axios.get(urlWithArguments(),\n     { headers: {\n      token: process.env.noaaToken,\n    }}\n    )\n    setPredictions(waterLevels);\n  }\n\n  fetchTide();\n\n}, [])\n\nuseEffect(() => {\n  setLinePosition([\n    position,\n    [ stationInfo.lon + predictions[0]?.v,\n    position[1]]\n  ])\n\n}, [predictions, position])\n\n\n\n\n  return (\n    <>\n       <CircleMarker center={position} pathOptions={stationMarker} radius={3} />\n       <Polyline pathOptions={waterLevelMarker} positions={linePosition} />\n    </>\n)\n}\n\nconst stationMarker = { color: 'blue', opacity: '.2' }\n\nconst waterLevelMarker = { color: 'green' }\n\nexport default Station\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}